(self.webpackChunklogstore2parquet=self.webpackChunklogstore2parquet||[]).push([[658],{3393:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return d},default:function(){return m}});var o=n(2122),a=n(9756),r=(n(7294),n(3905)),p=["components"],i={title:"convert"},c="Command: convert",u={unversionedId:"commands/convert",id:"commands/convert",isDocsHomePage:!1,title:"convert",description:"The convert command transforms a supported input CSV file into a Parquet file.",source:"@site/docs/commands/convert.md",sourceDirName:"commands",slug:"/commands/convert",permalink:"/logstore2parquet/docs/commands/convert",editUrl:"https://github.com/open-lms-open-source/logstore2parquet/edit/main/website/docs/commands/convert.md",version:"current",frontMatter:{title:"convert"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/logstore2parquet/docs/introduction"},next:{title:"version",permalink:"/logstore2parquet/docs/commands/version"}},d=[{value:"Usage",id:"usage",children:[]},{value:"Output",id:"output",children:[]},{value:"Examples",id:"examples",children:[]}],l={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,p);return(0,r.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"command-convert"},"Command: convert"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"convert")," command transforms a supported input CSV file into a Parquet file.\nUnsupported tables will end with an error without touching the output destination."),(0,r.kt)("p",null,"When specifying a table with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--table")," flag, don't include the ",(0,r.kt)("inlineCode",{parentName:"p"},"mdl_")," prefix."),(0,r.kt)("p",null,"To use the ",(0,r.kt)("inlineCode",{parentName:"p"},"--schema")," flag, a schema file must be provided that specifies the formats to use."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"l2p convert [flags] <inputfile> <outputfile>\n")),(0,r.kt)("h2",{id:"output"},"Output"),(0,r.kt)("p",null,"This command writes a new parquet file."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Convert a logstore_standard_log table (the default table type):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ l2p convert input.csv output.parquet\n")),(0,r.kt)("p",null,"Convert a different table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ l2p convert --table logstore_standard_log input.csv output.parquet\n")),(0,r.kt)("p",null,"Convert a table based on an input schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ cat input.schema\nname=id, type=INT64\nname=eventname, type=BYTE_ARRAY, convertedtype=UTF8, encoding=PLAIN_DICTIONARY\nname=component, type=BYTE_ARRAY, convertedtype=UTF8, encoding=PLAIN_DICTIONARY\nname=action, type=BYTE_ARRAY, convertedtype=UTF8, encoding=PLAIN_DICTIONARY\nname=target, type=BYTE_ARRAY, convertedtype=UTF8, encoding=PLAIN_DICTIONARY\nname=objecttable, type=BYTE_ARRAY, convertedtype=UTF8, encoding=PLAIN_DICTIONARY\nname=objectid, type=INT64\nname=crud, type=BYTE_ARRAY, convertedtype=UTF8, encoding=PLAIN_DICTIONARY\nname=edulevel, type=INT32\nname=contextid, type=INT64\nname=contextlevel, type=INT64\nname=contextinstanceid, type=INT64\nname=userid, type=INT64\nname=courseid, type=INT64\nname=relateduserid, type=INT64\nname=anonymous, type=INT32\nname=other, type=BYTE_ARRAY, convertedtype=UTF8\nname=timecreated, type=INT64\nname=origin, type=BYTE_ARRAY, convertedtype=UTF8, encoding=PLAIN_DICTIONARY\nname=ip, type=BYTE_ARRAY, convertedtype=UTF8, encoding=PLAIN_DICTIONARY\nname=realuserid, type=INT64\n\n$ l2p convert --schema input.schema input.csv output.parquet\n")))}m.isMDXComponent=!0}}]);